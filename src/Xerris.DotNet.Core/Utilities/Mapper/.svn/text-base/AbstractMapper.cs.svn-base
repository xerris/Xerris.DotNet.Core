using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using DealManagement.Utility.Mapper.Converter;

namespace DealManagement.Utility.Mapper
{
    public abstract class AbstractMapper<FROM, TO> : IMapper<FROM, TO>
        where FROM : class
        where TO : class
    {
        private readonly List<IPropertyMapper> propertyMappers = new List<IPropertyMapper>();
        private readonly List<IClassMapper<FROM, TO>> classMappers = new List<IClassMapper<FROM, TO>>();

        private static readonly Dictionary<Type, IValueConverter> CONVERTERS =
            new Dictionary<Type, IValueConverter>
                {
                    {typeof(DateTime?), new NullableDateTimeConverter()},
                    {typeof(DateTime) , new DateTimeConverter()},
                    {typeof(String)   , new StringConverter()},
                    {typeof(decimal?) , new DecimalConverter()},
                    {typeof(double?)  , new DoubleConverter()},
                    {typeof(int?)     , new IntegerConverter()}
        }; 

        protected AbstractMapper()
        {
            InternalInitialize(); //avoids virtual call in constructor
        }

        protected abstract void Initialize();
        protected abstract TO Create();

        private void InternalInitialize()
        {
            Initialize();
        }

        public  List<IPropertyMapper> PropertyMappers
        {
            get { return propertyMappers; }
        }

        public List<IClassMapper<FROM, TO>> ClassMappers
        {
            get { return classMappers; }
        }

        protected void Map<T>(Expression<Func<FROM, object>> sourceProperty, Expression<Func<TO, T>> targetProperty)
        {
            PropertyInfo source = ReflectionHelper.GetProperty(sourceProperty);
            PropertyInfo target = ReflectionHelper.GetProperty(targetProperty);
            Map(source, target, GetValueConverter<T>(source, target));
        }

        protected static IValueConverter<T> GetValueConverter<T>(PropertyInfo source, PropertyInfo target)
        {
            return Equals(source.PropertyType, target.PropertyType)
                       ? new DirectConverter<T>()
                       : GetConverterFromMap<T>();
        }

        private static IValueConverter<T> GetConverterFromMap<T>()
        {
            IValueConverter converter;
            Type targetType = typeof(T);

            bool hasConverter = CONVERTERS.TryGetValue(targetType, out converter);
            Validate.Begin().IsTrue(hasConverter,
                string.Format("There is no converter for type {0}.  Must provide a custom converter",
                              targetType)).Check();
            return (IValueConverter<T>)converter;
        }

        protected void Map<T>(Expression<Func<FROM, object>> sourceProperty, Expression<Func<TO, T>> targetProperty, IValueConverter<T> converter)
        {
            Map(ReflectionHelper.GetProperty(sourceProperty), ReflectionHelper.GetProperty(targetProperty), converter);
        }

        protected void Map<T>(Expression<Func<TO, T>> targetProperty, T value)
        {
            PropertyInfo target = ReflectionHelper.GetProperty(targetProperty);
            propertyMappers.Add(new ValueMapper<T>(target, value));
        }

        protected void Map(IClassMapper<FROM, TO> action)
        {
            classMappers.Add(action);
        }

        private void Map<T>(PropertyInfo source, PropertyInfo target, IValueConverter<T> converter)
        {
            propertyMappers.Add(new PropertyMapper<T>(source, target, converter));
        }

        public TO Build(FROM input)
        {
            TO target = Create();
            return BuildInternal(input, target);
        }

        private TO BuildInternal(FROM input, TO to)
        {
            foreach (var applier in propertyMappers)
            {
                applier.Apply(input, to);
            }
            foreach (IClassMapper<FROM, TO> action in classMappers)
            {
                action.Apply(input, to);
            }
            return to;
        }
    }
}
