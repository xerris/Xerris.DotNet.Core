name: Build And Publish

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build --configuration Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: '**/bin/Release/net8.0'

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Test
        run: dotnet test --verbosity normal

  tag:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure Git User
        run: |
          git config --global user.email "greg@xerris.com"
          git config --global user.name "kr0ggg"

      - name: Add New Production Tag
        run: |
          chmod +x .github/workflows/add-new-production-tag.sh
          ./.github/workflows/add-new-production-tag.sh
  
  pack-n-publish:
    runs-on: ubuntu-latest
    needs: [ build, test, tag ]
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(curl -s \
            https://api.nuget.org/v3/registration5-semver1/xerris.dotnet.core/index.json | \
            jq -r '.items[0].upper')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: calc_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.current_version }}
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          NEXT_VERSION="${VERSION_PARTS[0]}. \
            ${VERSION_PARTS[1]}. \
            $((VERSION_PARTS[2] + 1))"
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create packages folder
        run: mkdir ./packages

      - name: Pack
        run: |
          dotnet pack \
            ./src/Xerris.DotNet.Core/Xerris.DotNet.Core.csproj \
            --configuration Release \
            --output ./packages \
            /p:Version=${{ steps.calc_version.outputs.next_version }}

      - name: List NuGet packages after packing
        run: ls -la ./packages

      - name: Publish to NuGet
        run: |
          dotnet nuget push ./packages/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source ${{ secrets.NUGET_SOURCE_URI }} \
            --timeout 360 \
            --skip-duplicate